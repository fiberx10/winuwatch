generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ImagesUrl {
  id        String   @id @default(cuid())
  url       String
  WatchesId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Watches   Watches  @relation(fields: [WatchesId], references: [id])

  @@index([WatchesId])
  @@map("images_url")
}

model Watches {
  id                  String       @id @default(cuid())
  brand               String
  model               String
  reference_number    String
  movement            String
  Bracelet_material   String
  year_of_manifacture Int
  caliber_grear       Int
  number_of_stones    Int
  glass               String
  bezel_material      String
  has_box             Boolean      @default(false)
  has_certificate     Boolean      @default(false)
  condition           String
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  images_url          ImagesUrl[]
  Competition         Competition?

  @@index([id])
  @@map("watches")
}

model Competition {
  id                       String            @id @default(cuid())
  name                     String
  max_watch_number         Int
  max_space_in_final_draw  Int
  winner_announcement_date DateTime?
  start_date               DateTime
  end_date                 DateTime
  run_up_prize             String?
  drawing_date             DateTime
  remaining_tickets        Int
  ticket_price             Float
  total_tickets            Int
  location                 String
  price                    Float
  status                   CompetitionStatus
  winner                   String?
  second_reward            String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  watchesId                String            @unique
  Watches                  Watches?          @relation(fields: [watchesId], references: [id])
  Order                    Order[]
  Ticket                   Ticket[]

  @@index([id])
  @@map("competition")
}

model Order {
  id            String        @id @default(cuid())
  first_name    String
  last_name     String
  country       String
  address       String
  town          String?
  zip           String
  phone         String
  email         String
  date          DateTime
  paymentMethod PaymentMethod
  checkedEmail  Boolean
  checkedTerms  Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  totalPrice    Float
  status        order_status
  paymentId     String?
  intentId      String?
  Competition   Competition[]
  Ticket        Ticket[]
  affiliationId String?
  Affliated     affiliation?  @relation(fields: [affiliationId], references: [id])

  @@index([affiliationId, id])
  @@map("order")
}

model Ticket {
  id            String      @id @default(cuid())
  orderId       String
  competitionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Order         Order       @relation(fields: [orderId], references: [id])
  Competition   Competition @relation(fields: [competitionId], references: [id])
  ticketPrice   Float       @default(0)

  @@index([competitionId])
  @@index([orderId])
  @@map("tickets")
}

model Question {
  id            String   @id @default(cuid())
  question      String
  correctAnswer String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  imageURL      String?
  answers       answer[]

  @@map("question")
}

model answer {
  id         String   @id @default(cuid())
  answer     String
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Question   Question @relation(fields: [questionId], references: [id])

  @@index([questionId])
  @@map("answers")
}

model CompetitionToOrder {
  A String
  B String

  @@unique([A, B], map: "_CompetitionToOrder_AB_unique")
  @@index([B], map: "_CompetitionToOrder_B_index")
  @@map("_CompetitionToOrder")
}

enum CompetitionStatus {
  ACTIVE
  NOT_ACTIVE
  COMPLETED
}

enum order_status {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
  INCOMPLETE
}

model affiliation {
  id            String   @id
  discountCode  String   @unique
  discountRate  Float    @default(0.1)
  ownerEmail    String   @unique
  createdAt     DateTime @default(now())
  competitionId String
  uses          Int      @default(0)
  updatedAt     DateTime @updatedAt
  Order         Order[]

  @@index([competitionId])
}

enum PaymentMethod {
  PAYPAL
  STRIPE
  AFFILIATION
}
