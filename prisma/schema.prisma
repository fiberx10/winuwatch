// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Watches {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  brand               String
  model               String
  reference_number    String
  movement            String
  Bracelet_material   String
  year_of_manifacture Int
  caliber_grear       Int
  number_of_stones    Int
  glass               String
  bezel_material      String
  has_box             Boolean      @default(false)
  has_certificate     Boolean      @default(false)
  images_url          String[]
  condition           String
  Competition         Competition?

  @@map("watches")
}

model Competition {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  max_watch_number         Int
  max_space_in_final_draw  Int
  winner_announcement_date DateTime?
  start_date               DateTime
  end_date                 DateTime
  run_up_prize             String?
  drawing_date             DateTime
  remaining_tickets        Int
  ticket_price             Float
  total_tickets            Int
  location                 String
  price                    Float
  status                   CompetitionStatus
  winner                   String?
  orderId                  String?           @db.ObjectId

  second_reward String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  watchesId     String   @unique @db.ObjectId
  Watches       Watches  @relation(fields: [watchesId], references: [id])
  Order         Order?   @relation(fields: [orderId], references: [id])
  Ticket        Ticket[]

  @@map("competition")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentMethod {
  PAYPAL
  STRIPE
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  first_name    String
  last_name     String
  country       String
  address       String
  town          String
  zip           String
  phone         String
  email         String
  date          DateTime
  paymentMethod PaymentMethod
  checkedEmail  Boolean
  checkedSMS    Boolean
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  totalPrice    Float
  Competition   Competition[]
  Ticket        Ticket[]

  @@map("order")
}

model Ticket {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String      @db.ObjectId
  Order         Order       @relation(fields: [orderId], references: [id])
  competitionId String      @db.ObjectId
  Competition   Competition @relation(fields: [competitionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@map("ticket")
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  answers       String[]
  correctAnswer String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("question")
}

enum CompetitionStatus {
  ACTIVE
  NOT_ACTIVE
  COMPLETED
}
